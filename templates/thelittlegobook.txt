chapter 1 About book


chapter 2 Intro
1.why go?
(a).
The first is that it’s a relatively simple language with a relatively simple standard library.
 In a lot of ways, the incremental nature of Go is to simplify some of the complexity 
we’ve seen being added to languages over the last couple of decades. The other
reason is that for many developers, it will complement your existing arsenal.
(b).
Go was built as a system language (e.g., operating systems, device drivers)
for system developers  
(c).
go can do many things

2.A Note from the Author
(a).The Little MongoDB Book
(b).The Little Redis Book
(c).the book is too shallow or others too detailed


chapter 3   
1.get started
(a). Go Playground which lets you run code online withouthaving to install anything
(b).install
    1.You can install it from source
    2.you use one of the pre-compiled binaries(https://golang.org/dl/)
      When you go to the download page, you’ll see installers for various platforms.
(c). setup Go ourselves
    1.Except for simple examples, Go is designed to work when your code 
      is inside a workspace. The workspace is a folder
      composed of bin, pkg and src subfolders      
    2.in short, create a go folder with a src subfolder wherever you expect to put your projects.

 (d).windows
    Download the latest zip file. If you’re on an x64 system, you’ll want go#.#.#.windows-amd64.zip, where #.#.# is
   the latest version of Go.
   Unzip it at a location of your choosing. c:\Go is a good choice.
   Set up two environment variables:
   1. GOPATH points to your workspace. That might be something like c:\users\goku\work\go.
   2. Add c:\Go\bin to your PATH environment variable.
     Environment variables can be set through the Environment Variables button on the Advanced tab of the System
     control panel. Some versions of Windows provide this control panel through the Advanced System Settings option
     inside the System control panel.
     Open a command prompt and type go version. You’ll hopefully get an output that looks like go version go1.3.3
     windows/amd64.
   
Chapter 4
(1).the basic
  Go is a compiled, statically typed language with a C-like syntax and garbage collection.
 (a)Compilation
  1.Compilation is the process of translating the source code that you write into a 
  lower level language – either assembly(as is the case with Go), 
  or some other intermediary language (as with Java and C#).
 2.Compiled languages can be unpleasant to work with because compilation can be slow
   Compiled languages can be unpleasant to work with because compilation can be slow. It’s hard to iterate quickly if you
   have to spend minutes or hours waiting for code to compile. Compilation speed is one of the major design goals of Go.
   This is good news for people working on large projects as well as those of us used to a quick feedback cycle offered by
   interpreted languages.
 3.Compiled languages tend to run faster and the executable can be run without additional dependencies (at least, that’s
   true for languages like C, C++ and Go which compile directly to assembly).
 
(2).Static Typing
  1. Being statically typed means that variables must be of a specific type (int, string, bool, []byte, etc.). This is either
     achieved by specifying the type when the variable is declared or, in many cases, letting the compiler infer the type
     (we’ll look at examples shortly).
  2.but there are advantages, especially when you pair static typing with compilation.
    The two are often conflated. It’s true that when you have one, you normally have 
    the other but it isn’t a hard rule. With a rigid type system, a compiler is able
    to detect problems beyond mere syntactical mistakes as well as make further optimizations 
 
 (3).C-Like Syntax 
  1.Saying that a language has a C-like syntax means that if you’re used to any other C-like languages such as C, C++,
    Java, JavaScript and C#, then you’re going to find Go familiar – superficially, at least. For example, it means && is
    used as a boolean AND, == is used to compare equality, { and } start and end a scope, and array indexes start at 0.
  2.C-like syntax also tends to mean semi-colon terminated lines and parentheses around conditions. Go does away with
    both of these, though parentheses are still used to control precedence. For example, an if statement looks like this:
    if name == "Leto" {
    print("the spice must flow")
    }
   And in more complicated cases, parentheses are still useful:
    if (name == "Goku" && power > 9000) || (name == "gohan" && power < 4000) {
    print("super Saiyan")
    }
   Beyond this, Go is much closer to C than C# or Java - not only in terms of syntax, but in terms of purpose. That’s
   reflected in the terseness and simplicity of the language which will hopefully start to become obvious as you learn it.
 (4).Garbage Collected
   1.Some variables, when created, have an easy-to-define life. A variable local to a function, for example, disappears when
     the function exits. In other cases, it isn’t so obvious – at least to a compiler. For example, the lifetime of a variable
     returned by a function or referenced by other variables and objects can be tricky to determine.
   2.Without garbage collection, it’s up to developers to free the memory associated with such variables 
   at a point where the developer knows the variable isn’t needed. How? In C, you’d literally free(str); the variable.
   3.Languages with garbage collectors (e.g., Ruby, Python, Java, JavaScript, C#, Go) are able to keep track of these
     and free them when they’re no longer used. Garbage collection adds overhead, but it also eliminates a number of
     devastating bugs.
 (5).Running Go Code
     1.Let’s start our journey by creating a simple program and learning how to compile and execute it
     package main
    func main() {
    println("it's over 9000!")
    }
    Save the file as main.go. For now, you can save it anywhere you want;
     we don’t need to live inside Go’s workspace for trivial examples.
    Next, open a shell/command prompt and change the directory to where you saved the file. For me, that means typing
    cd ~/code.Finally, run the program by entering:go run main.go If everything worked, you should see it’s over 9000!.
    
    2.But wait, what about the compilation step? go run is a handy command that compiles and runs your code. It uses
      a temporary directory to build the program, executes it and then cleans itself up. You can see the location of the
      temporary file by running:go run --work main.go

    3.To explicitly compile code, use go build: go build main.go This will generate an executable main which you can run.
     On Linux / OSX, don’t forget that you need to prefix the executable with dot-slash, so you need to type ./main.

    4.While developing, you can use either go run or go build. When you deploy your code however, you’ll want to deploy
     a binary via go build and execute that. 

  


