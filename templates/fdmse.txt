PART I software engineer
考试题型：概念问答题、实践案例题
(50)
一、软件过程
软件过程的概念；
软件过程是过去十年中人们关注的焦点。但准确讲什么是软件过程呢？
在本书中，我们定义软件过程为建造高质量软件需要完成的任务的框架。“过
程”与软件工程同义吗？答案是“是也不是”。一个软件过程定义了软件开
发中采用的方法，但软件工程还包含该过程中应用的技术——技术方法和自
动化工具。
软件过程为一个为建造高质量软件所需完成的任务的框架，即形成软件产品的一系列步骤，包括中间产品、资源、角色及过程中采取的方法、工具等范畴。

经典软件过程模型的特点（瀑布模型、增量模型、演化模型、统一过程模型）；
1.瀑布模型
 瀑布模型（经典生命周期）提出了软件开发的系统化的、顺序的方法。其流 程从用户需求规格说明开始，通过策划、建模、构建和部署的过程，最终提供一 个完整的软件并提供持续的技术支持。    
 优点：  
 1. 强调开发的阶段性，各阶段具有顺序性和依赖性 
  2. 强调早期调研和需求分析，推迟编码实现的观点 
  3. 提供了一个摸板，这个摸板使得分析、设计、编码、测试和支持的方法可以   在该摸板下有一个共同的指导   
   缺点：  
   1. 文档驱动，用户无法及时了解产品的情况  
   2. 依赖早期调研和需求分析，很难适应在许多项目开始阶段必然存在的不确定性。
   3. 流程单一，必须要完成前一阶段的任务，才能进行下一阶段，开发过程中的 成功经验无法用于本产品。  4. 测试在后期引入，对于系统存在的重大缺陷，如果在可执行程序评审之前没 有被发现，将可能造成重大损失。

增量过程模型    
增量过程模型包括增量模型、RAD 模型。  （一）增量模型 增量过程模型以迭代的方式运用瀑布模型，把软件产品作为一 系列的增量构  件来设计、编码、集成和测试。每个构件由多个相互作用的模块构成，并且能够 完成特定的功能。使用增量模型时，第一个增量往往是核心功能。    优点：  1.能在较短的时间内向用户提交可完成部分工作的产品。  2.逐步增加产品功能可以使用户有充裕的时间学习和适应新产品，从而减少一个 全新的软件可能给客户组织带来的冲击。 3. 规避技术风险  4. 可并行开发构件，加快开发的进度    缺点：
1.  没有考虑软件的整体质量和长期的可维护性。  2.  大部分情况是不合适的操作算法被采用目的为了演示功能，不合适的开发工 具被采用仅仅为了它的方便，还有不合适的操作系统被选择等等。 3.  由于达不到质量要求产品可能被抛弃，而采用新的模型重新设计    适用范围：项目在既定的商业要求期限之前不可能找到足够的开发人员； 

RAD 模型  
RAD  模型是一种侧重于短暂的开发周期的增量软件过程模型，它是瀑布模 型的“高速”变体，通过基于构建的构建方法实现快速开发。开发团队能够在非 常短的时间内创造出“全功能系统”    优点：  1．开发速度快，质量有保证。 2．对信息系统特别有效。
缺点：  1.  对于大型的可伸缩的项目，RAD 需要大量的人力资源来创建多个相对的独立 的 RAD 团队  2.  如果开发者和用户没有为短时间内急速完成整个系统做好准备，RAD 项目将 会失败。  3.  如果一个系统不能合理的模块化，RAD 构件建立会有很多问题。  4.  如果系统需求是高性能，并且需要通过调整构件接口的方式来提高性能，不 能采用 RAD 模型  5.  技术风险很高的情况下    适用范围：1、 不适合技术风险很高的开发，不适合系统需求是高性能，并且需  要通过调整构件接口的方式来提高性能的产品开发。    2、 适用于工期紧张，又可细分功能，还要有合适的构件


演化过程模型    演化过程模型包括原型开发，螺旋模型，协同开发模型。  （一）原型开发 从需求收集开始，开发者和客户在一起定义软件的总体目标， 标识已知的需  求并且规划出需要进一步定义的区域。然后是“快速设计”，它集中于软件中那些 对客户可见的部分的表示，这将导致原型的创建，并由客户评估并进一步精化待 开发软件的需求。逐步调整原型使其满足客户的需求，这个过程是迭代的。其流 程从听取客户意见开始、随后是建造/修改原型、客户测试运行原型、然后回头 往复循环直到客户对原型满意为止。由于这种模型可以让客户快速的感受到实际 的系统（虽然这个系统不带有任何质量的保证），所以客户和开发者都比较喜欢 这种过程模型（对于那些仅仅用来演示软件功能的公司而言或从来不考虑软件质
量和不害怕长期维护的公司而言）。    优点：  1、能让人（开发者或客户）很快见到产品，有成就感。 2、能渐进地启发客户提出新的要求或任务。    缺点：  1、 没有考虑软件的整体质量和长期的可维护性。  2、 大部分情况是不合适的操作算法被采用目的为了演示功能，不合适的开发工 具被采用仅仅为了它的方便，还有不合适的操作系统被选择等等。  3、 由于达不到质量要求产品可能被抛弃，而采用新的模型重新设计。


统一过程模型    统一过程模型是一种“用例驱动、以体系结构为核心、迭代及增量”的软件 过程框架，由 UML 方法和工具支持。它是一种增量模型，定义了五个阶段：    a、起始阶段，包括用户沟通和计划活动，强调定义和细化用例    b、 细化阶段，包括用户沟通和建模活动，重点是创建分析和设计模型。    c、构件阶段，细化模型设计，并将设计模型转化为软件构件实现    d、 转化阶段，将软件从开发人员传递给最终用户，并由用户完成 beta 测试和验 收测试    e、生产阶段，持续地监控软件的运行，并提供技术支持。    优点：  1. 任何功能开发后就进入测试过程，及早进行验证 2. 早期风险识别，采取预防措施    缺点：  1. 需求必须在开始之前完全弄清楚，否怎有可能在架构上出现错误 2. 必须有严格的过程管理，以免使过程退化为原始的试→错→改模式    3．如果不加控制的让用户过早接触没有测试完全，版本不稳定的产品可能对用 
户和开发团队都带来负面的影响 



过程评估与CMM/CMMI的基本概念；

敏捷宣言与敏捷过程的特点。

二、软件需求
软件需求的概念；



需求工程的基本过程；


分层数据流模型；

用例和场景建模及其UML表达（用例图、活动图、泳道图、顺序图）；

数据模型建模及其UML表达（类图）；

行为模型建模及其UML表达（状态机图）。

三、软件设计与构造
1.软件体系结构及体系结构风格的概念；

2.设计模式的概念；



3.模块化设计的基本思想及概念（抽象、分解、模块化、封装、信息隐藏、功能独立）；



4.软件重构的概念；

5.软件体系结构的UML建模（包图、类图、构件图、顺序图、部署图）；


6.接口的概念；

7.面向对象设计原则（开闭原则、Liskov替换原则、依赖转置原则、接口隔离原则）；


8.内聚与耦合的概念、常见的内聚和耦合类型。

四、软件测试
1.软件测试及测试用例的概念；


2.单元测试、集成测试、确认测试、系统测试、回归测试的概念；


3.调试的概念、调试与测试的关系；


4.测试覆盖度的概念；


白盒测试、黑盒测试的概念；
1.白盒测试是测试者了解被测程序的内部结构和处理过程,对程序的所有逻辑路径进行测试,在不同点检查程序状态,确定实际状态与预期状态是否一致,白盒测试主要采用的技术有：路径测试技术和事务处理流程技术，对包含有大量逻辑判断或条件组合的程序采用基于逻辑的测试技术
2.黑盒测试也称为功能测试,它着眼于程序的外部特征,而不考虑程序的内部逻辑结构。测试者把被测程序看成一个黑盒,不用关心程序的内部结构。黑盒测试是在程序接口处进行测试，它只检查程序功能是否能按照规格说明书的规定正常使用，程序是否能适当地接收输入数据产生正确的输出信息，并且保持外部信息(如数据库或文件)的完整性。黑盒测试主要采用的技术有:等价分类法、边界值分析法、错误推测法和因果图等技术

代码圈复杂度的计算方法；



白盒测试中的基本路径测试方法；



黑盒测试中的等价类划分方法。
 
PART II CS Basic
type：问答、分析、编程
(40)
一、处理器体系结构
内容：CPU中的时序电路、单周期处理器的设计、流水线处理器的基本原理、Data Hazard的处理、流水线设计中的其他问题
二、优化程序性能
内容：优化程序性能、优化编译器的能力和局限性以及表示程序性能、特定体系结构或应用特性的性能优化、限制因素、确认和消除性能瓶颈
三、存储器结构及虚拟存储器
内容：局部性、存储器层级结构、计算机高速缓存器原理、高速缓存对性能的影响、地址空间、虚拟存储器、虚拟内存的管理、翻译和映射、TLB、动态存储器分配和垃圾收集
四、链接、进程及并发编程
内容：静态链接、目标文件、符号和符号表、重定位和加载、动态链接库、异常和进程、进程控制和信号、进程间的通信、进程间信号量的控制、信号量，各种并发编程模式，共享变量和线程同步，其他并行问题
五、系统级I/O和网络编程
内容：I/O相关概念、文件及文件操作、共享文件、网络编程、客户端-服务器模型，套接字接口、HTTP请求，Web服务器
 
Part III datastructure and algorithm
考试题型：QA、Analysis.PRogram
(60)
一、（Stack）、（Queue）和（Vector）
内容:
单链表,双向链表,环形链表,带哨兵节点的链表;
栈的基本概念和性质,栈ADT及其顺序,链接实现;栈的应用;栈与递归;
队列的基本概念和性质,队列ADT及其顺序,链接实现;队列的应用;
向量基本概念和性质;向量ADT及其数组、链接实现;
二、Tree
内容: 
树的基本概念和术语;
树的前序,中序,后序,层次序遍历;
二叉树及其性质;
普通树与二叉树的转换;
树的存储结构,标准形式;
完全树(complete tree)的数组形式存储;
树的应用,Huffman树的定义与应用;
三、search
内容: 
查找的基本概念;
对线性关系结构的查找,
顺序查找,(in-order search)
二分查找;(binary search)
Hash查找法,常见的Hash函数(直接定址法,随机数法),hash冲突的概念, 解决冲突的方法(开散列方法/拉链法,闭散列方法/开址定址法),二次聚集现象;
BST树定义,性质,ADT及其实现,BST树查找,插入,删除算法;
平衡树 (AVL) 的定义,性质,ADT及其实现,平衡树查找,插入算法,平衡因子的概念;
优先队列与堆,堆的定义,堆的生成,调整算法;范围查询;
iv.Sort
sort basic 
Insert sort
shell sort
select sort
quick sort
merge sort
radix sort 
ideal,code and complixity
V.Graph 
Graph
Graph storage structure
邻接表(Adjacency matrix)

Graph iterate,bfs,dfs;
最小生成树基本概念,
Prim算法,
Kruskal算法;
最短路径问题,
广度优先遍历算法,
Dijkstra算法,
Floyd算法;
拓扑排序。
